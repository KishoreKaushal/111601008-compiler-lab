%%
%term	EOF 
	| SEMICOLON
	| INT of int 
	| PLUS | MINUS | TIMES | DIVIDE 

%nonterm init		of Ast.exp list
		| program  of  Ast.exp list
        | exp     of  Ast.exp

%left TIMES DIVIDE
%left PLUS MINUS

%pos int
%verbose


%eop EOF
%noshift EOF

%name Tiger

%%

init	: program				(program)

program	:						([]) 
		| exp SEMICOLON program	(exp::program)

exp     :   INT                     (Ast.INT(INT))
        |   exp PLUS exp            (Ast.PLUS (exp1,exp2))
        |   exp MINUS exp           (Ast.MINUS (exp1,exp2))
        |   exp DIVIDE exp          (Ast.DIVIDE (exp1,exp2))
        |   exp TIMES exp           (Ast.TIMES (exp1,exp2))