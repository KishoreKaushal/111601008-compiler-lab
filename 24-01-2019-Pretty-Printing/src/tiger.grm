%%
%term	EOF
	| SEMICOLON
	| INT of int
	| STRING of string
	| ID of string
	| PLUS | MINUS | TIMES | DIVIDE
	| ASSIGN | DOT | LBRACK | RBRACK

%nonterm 	init		of Ast.exp list
		| 	program  	of  Ast.exp list
        | 	exp     	of  Ast.exp
		|	lvalue		of Ast.lvalue


%pos int
%verbose


%eop EOF
%noshift EOF

%left TIMES DIVIDE
%left PLUS MINUS

%name Tiger

%%

init	: program				(program)

program	:						([])
		| exp SEMICOLON program	(exp::program)

exp     :   INT                     (Ast.INT(INT))
        |   exp PLUS exp            (Ast.BINOP(exp1,Ast.PLUS,exp2))
		|	exp MINUS exp			(Ast.BINOP(exp1,Ast.MINUS,exp2))
		|	exp TIMES exp			(Ast.BINOP(exp1,Ast.TIMES,exp2))
		|	exp DIVIDE exp			(Ast.BINOP(exp1,Ast.DIVIDE,exp2))
		|	STRING					(Ast.STRING(STRING))
		|	lvalue ASSIGN exp		(Ast.ASSIGNMENT(lvalue , exp))

lvalue	:	ID						(Ast.LVAL_IDEN(ID))
		|	lvalue DOT ID			(Ast.FIELD (lvalue,ID))
		|	lvalue LBRACK exp RBRACK	(Ast.ELEMENT (lvalue,exp))
